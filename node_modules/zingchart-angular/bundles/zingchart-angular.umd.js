(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('zingchart/es6'), require('zingchart-constants')) :
    typeof define === 'function' && define.amd ? define('zingchart-angular', ['exports', '@angular/core', 'zingchart/es6', 'zingchart-constants'], factory) :
    (global = global || self, factory(global['zingchart-angular'] = {}, global.ng.core, global.zingchart, global.constants));
}(this, (function (exports, core, zingchart, constants) { 'use strict';

    zingchart = zingchart && zingchart.hasOwnProperty('default') ? zingchart['default'] : zingchart;
    constants = constants && constants.hasOwnProperty('default') ? constants['default'] : constants;

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/zingchart-angular.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ZingchartAngularService = /** @class */ (function () {
        function ZingchartAngularService() {
            this.count = 0;
        }
        /**
         * @return {?}
         */
        ZingchartAngularService.prototype.getCount = /**
         * @return {?}
         */
        function () {
            return this.count;
        };
        /**
         * @return {?}
         */
        ZingchartAngularService.prototype.increment = /**
         * @return {?}
         */
        function () {
            this.count++;
        };
        /**
         * @return {?}
         */
        ZingchartAngularService.prototype.decrement = /**
         * @return {?}
         */
        function () {
            this.count--;
        };
        ZingchartAngularService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ZingchartAngularService.ctorParameters = function () { return []; };
        /** @nocollapse */ ZingchartAngularService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ZingchartAngularService_Factory() { return new ZingchartAngularService(); }, token: ZingchartAngularService, providedIn: "root" });
        return ZingchartAngularService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ZingchartAngularService.prototype.count;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/zingchart-angular.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DEFAULT_WIDTH = constants.DEFAULT_WIDTH, DEFAULT_HEIGHT = constants.DEFAULT_HEIGHT, DEFAULT_OUTPUT = constants.DEFAULT_OUTPUT, EVENT_NAMES = constants.EVENT_NAMES, METHOD_NAMES = constants.METHOD_NAMES;
    var ZingchartAngularComponent = /** @class */ (function () {
        // constructor(private service: ZingchartAngularService, private ref: ElementRef, private viewRef: ViewContainerRef) { 
        function ZingchartAngularComponent(service) {
            var _this = this;
            this.service = service;
            this.about_hide = new core.EventEmitter();
            this.about_show = new core.EventEmitter();
            this.animation_end = new core.EventEmitter();
            this.animation_start = new core.EventEmitter();
            this.animation_step = new core.EventEmitter();
            this.beforedestroy = new core.EventEmitter();
            this.bugreport_hide = new core.EventEmitter();
            this.bugreport_show = new core.EventEmitter();
            this.click = new core.EventEmitter();
            this.complete = new core.EventEmitter();
            this.data_export = new core.EventEmitter();
            this.dataexport = new core.EventEmitter();
            this.dataload = new core.EventEmitter();
            this.dataparse = new core.EventEmitter();
            this.dataready = new core.EventEmitter();
            this.destroy = new core.EventEmitter();
            this.dimension_change = new core.EventEmitter();
            this.error = new core.EventEmitter();
            this.feed_clear = new core.EventEmitter();
            this.feed_interval_modify = new core.EventEmitter();
            this.feed_start = new core.EventEmitter();
            this.feed_stop = new core.EventEmitter();
            this.gcomplete = new core.EventEmitter();
            this.gload = new core.EventEmitter();
            this.gparse = new core.EventEmitter();
            this.guide_mousemove = new core.EventEmitter();
            this.guide_mouseout = new core.EventEmitter();
            this.heatmap_mousemove = new core.EventEmitter();
            this.history_back = new core.EventEmitter();
            this.history_forward = new core.EventEmitter();
            this.image_save = new core.EventEmitter();
            this.label_click = new core.EventEmitter();
            this.label_mousedown = new core.EventEmitter();
            this.label_mouseout = new core.EventEmitter();
            this.label_mouseover = new core.EventEmitter();
            this.label_mouseup = new core.EventEmitter();
            this.legend_hide = new core.EventEmitter();
            this.legend_item_click = new core.EventEmitter();
            this.legend_item_mousemove = new core.EventEmitter();
            this.legend_item_mouseout = new core.EventEmitter();
            this.legend_item_mouseover = new core.EventEmitter();
            this.legend_marker_click = new core.EventEmitter();
            this.legend_maximize = new core.EventEmitter();
            this.legend_minimize = new core.EventEmitter();
            this.legend_minimize_click = new core.EventEmitter();
            this.legend_pagination_click = new core.EventEmitter();
            this.legend_show = new core.EventEmitter();
            this.legend_drag_mousedown = new core.EventEmitter();
            this.lens_hide = new core.EventEmitter();
            this.lens_show = new core.EventEmitter();
            this.load = new core.EventEmitter();
            this.maps_zoom = new core.EventEmitter();
            this.menu_item_click = new core.EventEmitter();
            this.modify = new core.EventEmitter();
            this.modulesready = new core.EventEmitter();
            this.mousewheel = new core.EventEmitter();
            this.node_add = new core.EventEmitter();
            this.node_click = new core.EventEmitter();
            this.node_deselect = new core.EventEmitter();
            this.node_doubleclick = new core.EventEmitter();
            this.node_mousedown = new core.EventEmitter();
            this.node_mouseout = new core.EventEmitter();
            this.node_mouseover = new core.EventEmitter();
            this.node_mouseup = new core.EventEmitter();
            this.node_remove = new core.EventEmitter();
            this.node_select = new core.EventEmitter();
            this.node_set = new core.EventEmitter();
            this.objectsinit = new core.EventEmitter();
            this.objectsready = new core.EventEmitter();
            this.overscroll = new core.EventEmitter();
            this.plot_add = new core.EventEmitter();
            this.plot_click = new core.EventEmitter();
            this.plot_deselect = new core.EventEmitter();
            this.plot_doubleclick = new core.EventEmitter();
            this.plot_hide = new core.EventEmitter();
            this.plot_modify = new core.EventEmitter();
            this.plot_mouseout = new core.EventEmitter();
            this.plot_mouseover = new core.EventEmitter();
            this.plot_remove = new core.EventEmitter();
            this.plot_select = new core.EventEmitter();
            this.plot_show = new core.EventEmitter();
            this.postzoom = new core.EventEmitter();
            this.print = new core.EventEmitter();
            this.reload = new core.EventEmitter();
            this.render = new core.EventEmitter();
            this.resize = new core.EventEmitter();
            this.setdata = new core.EventEmitter();
            this.shape_click = new core.EventEmitter();
            this.shape_mousedown = new core.EventEmitter();
            this.shape_mouseout = new core.EventEmitter();
            this.shape_mouseover = new core.EventEmitter();
            this.shape_mouseup = new core.EventEmitter();
            this.source_hide = new core.EventEmitter();
            this.source_show = new core.EventEmitter();
            this.swipe = new core.EventEmitter();
            this.touchemove = new core.EventEmitter();
            this.touchend = new core.EventEmitter();
            this.touchstart = new core.EventEmitter();
            this.zingchart_plugins_selection_tool_mouseup = new core.EventEmitter();
            this.zingchart_plugins_selection_tool_selection = new core.EventEmitter();
            this.zoom = new core.EventEmitter();
            this.service.increment();
            this.chartId = 'zingchart-ng-' + this.service.getCount();
            METHOD_NAMES.forEach((/**
             * @param {?} method
             * @return {?}
             */
            function (method) {
                _this[method] = (/**
                 * @param {?} args
                 * @return {?}
                 */
                function (args) { return JSON.stringify(zingchart.exec(_this.chartId, method, args)); });
            }));
        }
        /**
         * @return {?}
         */
        ZingchartAngularComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var data = this.config;
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                }
                catch (e) {
                    throw new Error('Invalid object');
                }
            }
            if (this.series) {
                data['series'] = this.series;
            }
            this.chartWidth = this.width || DEFAULT_WIDTH;
            this.chartHeight = this.height || DEFAULT_HEIGHT;
            this.output = this.output || DEFAULT_OUTPUT;
            this.renderObject = {
                id: this.chartId,
                data: data,
                width: this.chartWidth,
                height: this.chartHeight,
                output: this.output,
            };
            if (this.theme) {
                this.renderObject['defaults'] = this.theme;
            }
            // Setup event listeners before rendering
            EVENT_NAMES.forEach((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this[event] && _this[event].observers && _this[event].observers.length) {
                    zingchart.bind(_this.chartId, event, ((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        _this[event].emit(result);
                    })));
                }
            }));
            zingchart.render(this.renderObject);
        };
        /**
         * @return {?}
         */
        ZingchartAngularComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.service.decrement();
            zingchart.exec(this.chartId, 'destroy');
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ZingchartAngularComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.config) {
                zingchart.exec(this.chartId, 'setdata', {
                    data: changes.config.currentValue,
                });
            }
            else if (changes.series) {
                this.config.series = changes.series.currentValue;
                zingchart.exec(this.chartId, 'setseriesdata', {
                    graphid: 0,
                    data: this.config.series,
                });
            }
            else if (changes.width || changes.height) {
                /** @type {?} */
                var width = (changes.width && changes.width.currentValue) || this.width;
                /** @type {?} */
                var height = (changes.height && changes.height.currentValue) || this.height;
                zingchart.exec(this.chartId, 'resize', {
                    width: width,
                    height: height,
                });
            }
        };
        ZingchartAngularComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'zingchart-angular',
                        template: "\n    <div id=\"{{chartId}}\"></div>\n  "
                    }] }
        ];
        /** @nocollapse */
        ZingchartAngularComponent.ctorParameters = function () { return [
            { type: ZingchartAngularService }
        ]; };
        ZingchartAngularComponent.propDecorators = {
            config: [{ type: core.Input }],
            id: [{ type: core.Input }],
            width: [{ type: core.Input }],
            output: [{ type: core.Input }],
            height: [{ type: core.Input }],
            series: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            about_hide: [{ type: core.Output }],
            about_show: [{ type: core.Output }],
            animation_end: [{ type: core.Output }],
            animation_start: [{ type: core.Output }],
            animation_step: [{ type: core.Output }],
            beforedestroy: [{ type: core.Output }],
            bugreport_hide: [{ type: core.Output }],
            bugreport_show: [{ type: core.Output }],
            click: [{ type: core.Output }],
            complete: [{ type: core.Output }],
            data_export: [{ type: core.Output }],
            dataexport: [{ type: core.Output }],
            dataload: [{ type: core.Output }],
            dataparse: [{ type: core.Output }],
            dataready: [{ type: core.Output }],
            destroy: [{ type: core.Output }],
            dimension_change: [{ type: core.Output }],
            error: [{ type: core.Output }],
            feed_clear: [{ type: core.Output }],
            feed_interval_modify: [{ type: core.Output }],
            feed_start: [{ type: core.Output }],
            feed_stop: [{ type: core.Output }],
            gcomplete: [{ type: core.Output }],
            gload: [{ type: core.Output }],
            gparse: [{ type: core.Output }],
            guide_mousemove: [{ type: core.Output }],
            guide_mouseout: [{ type: core.Output }],
            heatmap_mousemove: [{ type: core.Output }],
            history_back: [{ type: core.Output }],
            history_forward: [{ type: core.Output }],
            image_save: [{ type: core.Output }],
            label_click: [{ type: core.Output }],
            label_mousedown: [{ type: core.Output }],
            label_mouseout: [{ type: core.Output }],
            label_mouseover: [{ type: core.Output }],
            label_mouseup: [{ type: core.Output }],
            legend_hide: [{ type: core.Output }],
            legend_item_click: [{ type: core.Output }],
            legend_item_mousemove: [{ type: core.Output }],
            legend_item_mouseout: [{ type: core.Output }],
            legend_item_mouseover: [{ type: core.Output }],
            legend_marker_click: [{ type: core.Output }],
            legend_maximize: [{ type: core.Output }],
            legend_minimize: [{ type: core.Output }],
            legend_minimize_click: [{ type: core.Output }],
            legend_pagination_click: [{ type: core.Output }],
            legend_show: [{ type: core.Output }],
            legend_drag_mousedown: [{ type: core.Output }],
            lens_hide: [{ type: core.Output }],
            lens_show: [{ type: core.Output }],
            load: [{ type: core.Output }],
            maps_zoom: [{ type: core.Output }],
            menu_item_click: [{ type: core.Output }],
            modify: [{ type: core.Output }],
            modulesready: [{ type: core.Output }],
            mousewheel: [{ type: core.Output }],
            node_add: [{ type: core.Output }],
            node_click: [{ type: core.Output }],
            node_deselect: [{ type: core.Output }],
            node_doubleclick: [{ type: core.Output }],
            node_mousedown: [{ type: core.Output }],
            node_mouseout: [{ type: core.Output }],
            node_mouseover: [{ type: core.Output }],
            node_mouseup: [{ type: core.Output }],
            node_remove: [{ type: core.Output }],
            node_select: [{ type: core.Output }],
            node_set: [{ type: core.Output }],
            objectsinit: [{ type: core.Output }],
            objectsready: [{ type: core.Output }],
            overscroll: [{ type: core.Output }],
            plot_add: [{ type: core.Output }],
            plot_click: [{ type: core.Output }],
            plot_deselect: [{ type: core.Output }],
            plot_doubleclick: [{ type: core.Output }],
            plot_hide: [{ type: core.Output }],
            plot_modify: [{ type: core.Output }],
            plot_mouseout: [{ type: core.Output }],
            plot_mouseover: [{ type: core.Output }],
            plot_remove: [{ type: core.Output }],
            plot_select: [{ type: core.Output }],
            plot_show: [{ type: core.Output }],
            postzoom: [{ type: core.Output }],
            print: [{ type: core.Output }],
            reload: [{ type: core.Output }],
            render: [{ type: core.Output }],
            resize: [{ type: core.Output }],
            setdata: [{ type: core.Output }],
            shape_click: [{ type: core.Output }],
            shape_mousedown: [{ type: core.Output }],
            shape_mouseout: [{ type: core.Output }],
            shape_mouseover: [{ type: core.Output }],
            shape_mouseup: [{ type: core.Output }],
            source_hide: [{ type: core.Output }],
            source_show: [{ type: core.Output }],
            swipe: [{ type: core.Output }],
            touchemove: [{ type: core.Output }],
            touchend: [{ type: core.Output }],
            touchstart: [{ type: core.Output }],
            zingchart_plugins_selection_tool_mouseup: [{ type: core.Output }],
            zingchart_plugins_selection_tool_selection: [{ type: core.Output }],
            zoom: [{ type: core.Output }]
        };
        return ZingchartAngularComponent;
    }());
    if (false) {
        /** @type {?} */
        ZingchartAngularComponent.prototype.config;
        /** @type {?} */
        ZingchartAngularComponent.prototype.id;
        /** @type {?} */
        ZingchartAngularComponent.prototype.width;
        /** @type {?} */
        ZingchartAngularComponent.prototype.output;
        /** @type {?} */
        ZingchartAngularComponent.prototype.height;
        /** @type {?} */
        ZingchartAngularComponent.prototype.series;
        /** @type {?} */
        ZingchartAngularComponent.prototype.theme;
        /** @type {?} */
        ZingchartAngularComponent.prototype.about_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.about_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.animation_end;
        /** @type {?} */
        ZingchartAngularComponent.prototype.animation_start;
        /** @type {?} */
        ZingchartAngularComponent.prototype.animation_step;
        /** @type {?} */
        ZingchartAngularComponent.prototype.beforedestroy;
        /** @type {?} */
        ZingchartAngularComponent.prototype.bugreport_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.bugreport_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.complete;
        /** @type {?} */
        ZingchartAngularComponent.prototype.data_export;
        /** @type {?} */
        ZingchartAngularComponent.prototype.dataexport;
        /** @type {?} */
        ZingchartAngularComponent.prototype.dataload;
        /** @type {?} */
        ZingchartAngularComponent.prototype.dataparse;
        /** @type {?} */
        ZingchartAngularComponent.prototype.dataready;
        /** @type {?} */
        ZingchartAngularComponent.prototype.destroy;
        /** @type {?} */
        ZingchartAngularComponent.prototype.dimension_change;
        /** @type {?} */
        ZingchartAngularComponent.prototype.error;
        /** @type {?} */
        ZingchartAngularComponent.prototype.feed_clear;
        /** @type {?} */
        ZingchartAngularComponent.prototype.feed_interval_modify;
        /** @type {?} */
        ZingchartAngularComponent.prototype.feed_start;
        /** @type {?} */
        ZingchartAngularComponent.prototype.feed_stop;
        /** @type {?} */
        ZingchartAngularComponent.prototype.gcomplete;
        /** @type {?} */
        ZingchartAngularComponent.prototype.gload;
        /** @type {?} */
        ZingchartAngularComponent.prototype.gparse;
        /** @type {?} */
        ZingchartAngularComponent.prototype.guide_mousemove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.guide_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.heatmap_mousemove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.history_back;
        /** @type {?} */
        ZingchartAngularComponent.prototype.history_forward;
        /** @type {?} */
        ZingchartAngularComponent.prototype.image_save;
        /** @type {?} */
        ZingchartAngularComponent.prototype.label_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.label_mousedown;
        /** @type {?} */
        ZingchartAngularComponent.prototype.label_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.label_mouseover;
        /** @type {?} */
        ZingchartAngularComponent.prototype.label_mouseup;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_item_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_item_mousemove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_item_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_item_mouseover;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_marker_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_maximize;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_minimize;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_minimize_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_pagination_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.legend_drag_mousedown;
        /** @type {?} */
        ZingchartAngularComponent.prototype.lens_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.lens_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.load;
        /** @type {?} */
        ZingchartAngularComponent.prototype.maps_zoom;
        /** @type {?} */
        ZingchartAngularComponent.prototype.menu_item_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.modify;
        /** @type {?} */
        ZingchartAngularComponent.prototype.modulesready;
        /** @type {?} */
        ZingchartAngularComponent.prototype.mousewheel;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_add;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_deselect;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_doubleclick;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_mousedown;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_mouseover;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_mouseup;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_remove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_select;
        /** @type {?} */
        ZingchartAngularComponent.prototype.node_set;
        /** @type {?} */
        ZingchartAngularComponent.prototype.objectsinit;
        /** @type {?} */
        ZingchartAngularComponent.prototype.objectsready;
        /** @type {?} */
        ZingchartAngularComponent.prototype.overscroll;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_add;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_deselect;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_doubleclick;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_modify;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_mouseover;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_remove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_select;
        /** @type {?} */
        ZingchartAngularComponent.prototype.plot_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.postzoom;
        /** @type {?} */
        ZingchartAngularComponent.prototype.print;
        /** @type {?} */
        ZingchartAngularComponent.prototype.reload;
        /** @type {?} */
        ZingchartAngularComponent.prototype.render;
        /** @type {?} */
        ZingchartAngularComponent.prototype.resize;
        /** @type {?} */
        ZingchartAngularComponent.prototype.setdata;
        /** @type {?} */
        ZingchartAngularComponent.prototype.shape_click;
        /** @type {?} */
        ZingchartAngularComponent.prototype.shape_mousedown;
        /** @type {?} */
        ZingchartAngularComponent.prototype.shape_mouseout;
        /** @type {?} */
        ZingchartAngularComponent.prototype.shape_mouseover;
        /** @type {?} */
        ZingchartAngularComponent.prototype.shape_mouseup;
        /** @type {?} */
        ZingchartAngularComponent.prototype.source_hide;
        /** @type {?} */
        ZingchartAngularComponent.prototype.source_show;
        /** @type {?} */
        ZingchartAngularComponent.prototype.swipe;
        /** @type {?} */
        ZingchartAngularComponent.prototype.touchemove;
        /** @type {?} */
        ZingchartAngularComponent.prototype.touchend;
        /** @type {?} */
        ZingchartAngularComponent.prototype.touchstart;
        /** @type {?} */
        ZingchartAngularComponent.prototype.zingchart_plugins_selection_tool_mouseup;
        /** @type {?} */
        ZingchartAngularComponent.prototype.zingchart_plugins_selection_tool_selection;
        /** @type {?} */
        ZingchartAngularComponent.prototype.zoom;
        /** @type {?} */
        ZingchartAngularComponent.prototype.chartId;
        /** @type {?} */
        ZingchartAngularComponent.prototype.chartWidth;
        /** @type {?} */
        ZingchartAngularComponent.prototype.chartHeight;
        /** @type {?} */
        ZingchartAngularComponent.prototype.renderObject;
        /**
         * @type {?}
         * @private
         */
        ZingchartAngularComponent.prototype.service;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/zingchart-angular.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ZingchartAngularModule = /** @class */ (function () {
        function ZingchartAngularModule() {
        }
        ZingchartAngularModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ZingchartAngularComponent],
                        imports: [],
                        exports: [ZingchartAngularComponent]
                    },] }
        ];
        return ZingchartAngularModule;
    }());

    exports.ZingchartAngularComponent = ZingchartAngularComponent;
    exports.ZingchartAngularModule = ZingchartAngularModule;
    exports.ZingchartAngularService = ZingchartAngularService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=zingchart-angular.umd.js.map
