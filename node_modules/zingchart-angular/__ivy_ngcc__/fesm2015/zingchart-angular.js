import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import zingchart from 'zingchart/es6';
import constants from 'zingchart-constants';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class ZingchartAngularService {
    constructor() {
        this.count = 0;
    }
    /**
     * @return {?}
     */
    getCount() {
        return this.count;
    }
    /**
     * @return {?}
     */
    increment() {
        this.count++;
    }
    /**
     * @return {?}
     */
    decrement() {
        this.count--;
    }
}
ZingchartAngularService.ɵfac = function ZingchartAngularService_Factory(t) { return new (t || ZingchartAngularService)(); };
ZingchartAngularService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ZingchartAngularService, factory: ZingchartAngularService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ZingchartAngularService.ctorParameters = () => [];
/** @nocollapse */ ZingchartAngularService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ZingchartAngularService_Factory() { return new ZingchartAngularService(); }, token: ZingchartAngularService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZingchartAngularService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ZingchartAngularService.prototype.count;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const { DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_OUTPUT, EVENT_NAMES, METHOD_NAMES } = constants;
class ZingchartAngularComponent {
    // constructor(private service: ZingchartAngularService, private ref: ElementRef, private viewRef: ViewContainerRef) { 
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.about_hide = new EventEmitter();
        this.about_show = new EventEmitter();
        this.animation_end = new EventEmitter();
        this.animation_start = new EventEmitter();
        this.animation_step = new EventEmitter();
        this.beforedestroy = new EventEmitter();
        this.bugreport_hide = new EventEmitter();
        this.bugreport_show = new EventEmitter();
        this.click = new EventEmitter();
        this.complete = new EventEmitter();
        this.data_export = new EventEmitter();
        this.dataexport = new EventEmitter();
        this.dataload = new EventEmitter();
        this.dataparse = new EventEmitter();
        this.dataready = new EventEmitter();
        this.destroy = new EventEmitter();
        this.dimension_change = new EventEmitter();
        this.error = new EventEmitter();
        this.feed_clear = new EventEmitter();
        this.feed_interval_modify = new EventEmitter();
        this.feed_start = new EventEmitter();
        this.feed_stop = new EventEmitter();
        this.gcomplete = new EventEmitter();
        this.gload = new EventEmitter();
        this.gparse = new EventEmitter();
        this.guide_mousemove = new EventEmitter();
        this.guide_mouseout = new EventEmitter();
        this.heatmap_mousemove = new EventEmitter();
        this.history_back = new EventEmitter();
        this.history_forward = new EventEmitter();
        this.image_save = new EventEmitter();
        this.label_click = new EventEmitter();
        this.label_mousedown = new EventEmitter();
        this.label_mouseout = new EventEmitter();
        this.label_mouseover = new EventEmitter();
        this.label_mouseup = new EventEmitter();
        this.legend_hide = new EventEmitter();
        this.legend_item_click = new EventEmitter();
        this.legend_item_mousemove = new EventEmitter();
        this.legend_item_mouseout = new EventEmitter();
        this.legend_item_mouseover = new EventEmitter();
        this.legend_marker_click = new EventEmitter();
        this.legend_maximize = new EventEmitter();
        this.legend_minimize = new EventEmitter();
        this.legend_minimize_click = new EventEmitter();
        this.legend_pagination_click = new EventEmitter();
        this.legend_show = new EventEmitter();
        this.legend_drag_mousedown = new EventEmitter();
        this.lens_hide = new EventEmitter();
        this.lens_show = new EventEmitter();
        this.load = new EventEmitter();
        this.maps_zoom = new EventEmitter();
        this.menu_item_click = new EventEmitter();
        this.modify = new EventEmitter();
        this.modulesready = new EventEmitter();
        this.mousewheel = new EventEmitter();
        this.node_add = new EventEmitter();
        this.node_click = new EventEmitter();
        this.node_deselect = new EventEmitter();
        this.node_doubleclick = new EventEmitter();
        this.node_mousedown = new EventEmitter();
        this.node_mouseout = new EventEmitter();
        this.node_mouseover = new EventEmitter();
        this.node_mouseup = new EventEmitter();
        this.node_remove = new EventEmitter();
        this.node_select = new EventEmitter();
        this.node_set = new EventEmitter();
        this.objectsinit = new EventEmitter();
        this.objectsready = new EventEmitter();
        this.overscroll = new EventEmitter();
        this.plot_add = new EventEmitter();
        this.plot_click = new EventEmitter();
        this.plot_deselect = new EventEmitter();
        this.plot_doubleclick = new EventEmitter();
        this.plot_hide = new EventEmitter();
        this.plot_modify = new EventEmitter();
        this.plot_mouseout = new EventEmitter();
        this.plot_mouseover = new EventEmitter();
        this.plot_remove = new EventEmitter();
        this.plot_select = new EventEmitter();
        this.plot_show = new EventEmitter();
        this.postzoom = new EventEmitter();
        this.print = new EventEmitter();
        this.reload = new EventEmitter();
        this.render = new EventEmitter();
        this.resize = new EventEmitter();
        this.setdata = new EventEmitter();
        this.shape_click = new EventEmitter();
        this.shape_mousedown = new EventEmitter();
        this.shape_mouseout = new EventEmitter();
        this.shape_mouseover = new EventEmitter();
        this.shape_mouseup = new EventEmitter();
        this.source_hide = new EventEmitter();
        this.source_show = new EventEmitter();
        this.swipe = new EventEmitter();
        this.touchemove = new EventEmitter();
        this.touchend = new EventEmitter();
        this.touchstart = new EventEmitter();
        this.zingchart_plugins_selection_tool_mouseup = new EventEmitter();
        this.zingchart_plugins_selection_tool_selection = new EventEmitter();
        this.zoom = new EventEmitter();
        this.service.increment();
        this.chartId = 'zingchart-ng-' + this.service.getCount();
        METHOD_NAMES.forEach((/**
         * @param {?} method
         * @return {?}
         */
        (method) => {
            this[method] = (/**
             * @param {?} args
             * @return {?}
             */
            (args) => JSON.stringify(zingchart.exec(this.chartId, method, args)));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        let data = this.config;
        if (typeof data === 'string') {
            try {
                data = JSON.parse(data);
            }
            catch (e) {
                throw new Error('Invalid object');
            }
        }
        if (this.series) {
            data['series'] = this.series;
        }
        this.chartWidth = this.width || DEFAULT_WIDTH;
        this.chartHeight = this.height || DEFAULT_HEIGHT;
        this.output = this.output || DEFAULT_OUTPUT;
        this.renderObject = {
            id: this.chartId,
            data: data,
            width: this.chartWidth,
            height: this.chartHeight,
            output: this.output,
        };
        if (this.theme) {
            this.renderObject['defaults'] = this.theme;
        }
        // Setup event listeners before rendering
        EVENT_NAMES.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this[event] && this[event].observers && this[event].observers.length) {
                zingchart.bind(this.chartId, event, ((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    this[event].emit(result);
                })));
            }
        }));
        zingchart.render(this.renderObject);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.service.decrement();
        zingchart.exec(this.chartId, 'destroy');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.config) {
            zingchart.exec(this.chartId, 'setdata', {
                data: changes.config.currentValue,
            });
        }
        else if (changes.series) {
            this.config.series = changes.series.currentValue;
            zingchart.exec(this.chartId, 'setseriesdata', {
                graphid: 0,
                data: this.config.series,
            });
        }
        else if (changes.width || changes.height) {
            /** @type {?} */
            const width = (changes.width && changes.width.currentValue) || this.width;
            /** @type {?} */
            const height = (changes.height && changes.height.currentValue) || this.height;
            zingchart.exec(this.chartId, 'resize', {
                width,
                height,
            });
        }
    }
}
ZingchartAngularComponent.ɵfac = function ZingchartAngularComponent_Factory(t) { return new (t || ZingchartAngularComponent)(ɵngcc0.ɵɵdirectiveInject(ZingchartAngularService)); };
ZingchartAngularComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ZingchartAngularComponent, selectors: [["zingchart-angular"]], inputs: { output: "output", config: "config", id: "id", width: "width", height: "height", series: "series", theme: "theme" }, outputs: { about_hide: "about_hide", about_show: "about_show", animation_end: "animation_end", animation_start: "animation_start", animation_step: "animation_step", beforedestroy: "beforedestroy", bugreport_hide: "bugreport_hide", bugreport_show: "bugreport_show", click: "click", complete: "complete", data_export: "data_export", dataexport: "dataexport", dataload: "dataload", dataparse: "dataparse", dataready: "dataready", destroy: "destroy", dimension_change: "dimension_change", error: "error", feed_clear: "feed_clear", feed_interval_modify: "feed_interval_modify", feed_start: "feed_start", feed_stop: "feed_stop", gcomplete: "gcomplete", gload: "gload", gparse: "gparse", guide_mousemove: "guide_mousemove", guide_mouseout: "guide_mouseout", heatmap_mousemove: "heatmap_mousemove", history_back: "history_back", history_forward: "history_forward", image_save: "image_save", label_click: "label_click", label_mousedown: "label_mousedown", label_mouseout: "label_mouseout", label_mouseover: "label_mouseover", label_mouseup: "label_mouseup", legend_hide: "legend_hide", legend_item_click: "legend_item_click", legend_item_mousemove: "legend_item_mousemove", legend_item_mouseout: "legend_item_mouseout", legend_item_mouseover: "legend_item_mouseover", legend_marker_click: "legend_marker_click", legend_maximize: "legend_maximize", legend_minimize: "legend_minimize", legend_minimize_click: "legend_minimize_click", legend_pagination_click: "legend_pagination_click", legend_show: "legend_show", legend_drag_mousedown: "legend_drag_mousedown", lens_hide: "lens_hide", lens_show: "lens_show", load: "load", maps_zoom: "maps_zoom", menu_item_click: "menu_item_click", modify: "modify", modulesready: "modulesready", mousewheel: "mousewheel", node_add: "node_add", node_click: "node_click", node_deselect: "node_deselect", node_doubleclick: "node_doubleclick", node_mousedown: "node_mousedown", node_mouseout: "node_mouseout", node_mouseover: "node_mouseover", node_mouseup: "node_mouseup", node_remove: "node_remove", node_select: "node_select", node_set: "node_set", objectsinit: "objectsinit", objectsready: "objectsready", overscroll: "overscroll", plot_add: "plot_add", plot_click: "plot_click", plot_deselect: "plot_deselect", plot_doubleclick: "plot_doubleclick", plot_hide: "plot_hide", plot_modify: "plot_modify", plot_mouseout: "plot_mouseout", plot_mouseover: "plot_mouseover", plot_remove: "plot_remove", plot_select: "plot_select", plot_show: "plot_show", postzoom: "postzoom", print: "print", reload: "reload", render: "render", resize: "resize", setdata: "setdata", shape_click: "shape_click", shape_mousedown: "shape_mousedown", shape_mouseout: "shape_mouseout", shape_mouseover: "shape_mouseover", shape_mouseup: "shape_mouseup", source_hide: "source_hide", source_show: "source_show", swipe: "swipe", touchemove: "touchemove", touchend: "touchend", touchstart: "touchstart", zingchart_plugins_selection_tool_mouseup: "zingchart_plugins_selection_tool_mouseup", zingchart_plugins_selection_tool_selection: "zingchart_plugins_selection_tool_selection", zoom: "zoom" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "id"]], template: function ZingchartAngularComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.chartId);
    } }, encapsulation: 2 });
/** @nocollapse */
ZingchartAngularComponent.ctorParameters = () => [
    { type: ZingchartAngularService }
];
ZingchartAngularComponent.propDecorators = {
    config: [{ type: Input }],
    id: [{ type: Input }],
    width: [{ type: Input }],
    output: [{ type: Input }],
    height: [{ type: Input }],
    series: [{ type: Input }],
    theme: [{ type: Input }],
    about_hide: [{ type: Output }],
    about_show: [{ type: Output }],
    animation_end: [{ type: Output }],
    animation_start: [{ type: Output }],
    animation_step: [{ type: Output }],
    beforedestroy: [{ type: Output }],
    bugreport_hide: [{ type: Output }],
    bugreport_show: [{ type: Output }],
    click: [{ type: Output }],
    complete: [{ type: Output }],
    data_export: [{ type: Output }],
    dataexport: [{ type: Output }],
    dataload: [{ type: Output }],
    dataparse: [{ type: Output }],
    dataready: [{ type: Output }],
    destroy: [{ type: Output }],
    dimension_change: [{ type: Output }],
    error: [{ type: Output }],
    feed_clear: [{ type: Output }],
    feed_interval_modify: [{ type: Output }],
    feed_start: [{ type: Output }],
    feed_stop: [{ type: Output }],
    gcomplete: [{ type: Output }],
    gload: [{ type: Output }],
    gparse: [{ type: Output }],
    guide_mousemove: [{ type: Output }],
    guide_mouseout: [{ type: Output }],
    heatmap_mousemove: [{ type: Output }],
    history_back: [{ type: Output }],
    history_forward: [{ type: Output }],
    image_save: [{ type: Output }],
    label_click: [{ type: Output }],
    label_mousedown: [{ type: Output }],
    label_mouseout: [{ type: Output }],
    label_mouseover: [{ type: Output }],
    label_mouseup: [{ type: Output }],
    legend_hide: [{ type: Output }],
    legend_item_click: [{ type: Output }],
    legend_item_mousemove: [{ type: Output }],
    legend_item_mouseout: [{ type: Output }],
    legend_item_mouseover: [{ type: Output }],
    legend_marker_click: [{ type: Output }],
    legend_maximize: [{ type: Output }],
    legend_minimize: [{ type: Output }],
    legend_minimize_click: [{ type: Output }],
    legend_pagination_click: [{ type: Output }],
    legend_show: [{ type: Output }],
    legend_drag_mousedown: [{ type: Output }],
    lens_hide: [{ type: Output }],
    lens_show: [{ type: Output }],
    load: [{ type: Output }],
    maps_zoom: [{ type: Output }],
    menu_item_click: [{ type: Output }],
    modify: [{ type: Output }],
    modulesready: [{ type: Output }],
    mousewheel: [{ type: Output }],
    node_add: [{ type: Output }],
    node_click: [{ type: Output }],
    node_deselect: [{ type: Output }],
    node_doubleclick: [{ type: Output }],
    node_mousedown: [{ type: Output }],
    node_mouseout: [{ type: Output }],
    node_mouseover: [{ type: Output }],
    node_mouseup: [{ type: Output }],
    node_remove: [{ type: Output }],
    node_select: [{ type: Output }],
    node_set: [{ type: Output }],
    objectsinit: [{ type: Output }],
    objectsready: [{ type: Output }],
    overscroll: [{ type: Output }],
    plot_add: [{ type: Output }],
    plot_click: [{ type: Output }],
    plot_deselect: [{ type: Output }],
    plot_doubleclick: [{ type: Output }],
    plot_hide: [{ type: Output }],
    plot_modify: [{ type: Output }],
    plot_mouseout: [{ type: Output }],
    plot_mouseover: [{ type: Output }],
    plot_remove: [{ type: Output }],
    plot_select: [{ type: Output }],
    plot_show: [{ type: Output }],
    postzoom: [{ type: Output }],
    print: [{ type: Output }],
    reload: [{ type: Output }],
    render: [{ type: Output }],
    resize: [{ type: Output }],
    setdata: [{ type: Output }],
    shape_click: [{ type: Output }],
    shape_mousedown: [{ type: Output }],
    shape_mouseout: [{ type: Output }],
    shape_mouseover: [{ type: Output }],
    shape_mouseup: [{ type: Output }],
    source_hide: [{ type: Output }],
    source_show: [{ type: Output }],
    swipe: [{ type: Output }],
    touchemove: [{ type: Output }],
    touchend: [{ type: Output }],
    touchstart: [{ type: Output }],
    zingchart_plugins_selection_tool_mouseup: [{ type: Output }],
    zingchart_plugins_selection_tool_selection: [{ type: Output }],
    zoom: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZingchartAngularComponent, [{
        type: Component,
        args: [{
                selector: 'zingchart-angular',
                template: `
    <div id="{{chartId}}"></div>
  `
            }]
    }], function () { return [{ type: ZingchartAngularService }]; }, { about_hide: [{
            type: Output
        }], about_show: [{
            type: Output
        }], animation_end: [{
            type: Output
        }], animation_start: [{
            type: Output
        }], animation_step: [{
            type: Output
        }], beforedestroy: [{
            type: Output
        }], bugreport_hide: [{
            type: Output
        }], bugreport_show: [{
            type: Output
        }], click: [{
            type: Output
        }], complete: [{
            type: Output
        }], data_export: [{
            type: Output
        }], dataexport: [{
            type: Output
        }], dataload: [{
            type: Output
        }], dataparse: [{
            type: Output
        }], dataready: [{
            type: Output
        }], destroy: [{
            type: Output
        }], dimension_change: [{
            type: Output
        }], error: [{
            type: Output
        }], feed_clear: [{
            type: Output
        }], feed_interval_modify: [{
            type: Output
        }], feed_start: [{
            type: Output
        }], feed_stop: [{
            type: Output
        }], gcomplete: [{
            type: Output
        }], gload: [{
            type: Output
        }], gparse: [{
            type: Output
        }], guide_mousemove: [{
            type: Output
        }], guide_mouseout: [{
            type: Output
        }], heatmap_mousemove: [{
            type: Output
        }], history_back: [{
            type: Output
        }], history_forward: [{
            type: Output
        }], image_save: [{
            type: Output
        }], label_click: [{
            type: Output
        }], label_mousedown: [{
            type: Output
        }], label_mouseout: [{
            type: Output
        }], label_mouseover: [{
            type: Output
        }], label_mouseup: [{
            type: Output
        }], legend_hide: [{
            type: Output
        }], legend_item_click: [{
            type: Output
        }], legend_item_mousemove: [{
            type: Output
        }], legend_item_mouseout: [{
            type: Output
        }], legend_item_mouseover: [{
            type: Output
        }], legend_marker_click: [{
            type: Output
        }], legend_maximize: [{
            type: Output
        }], legend_minimize: [{
            type: Output
        }], legend_minimize_click: [{
            type: Output
        }], legend_pagination_click: [{
            type: Output
        }], legend_show: [{
            type: Output
        }], legend_drag_mousedown: [{
            type: Output
        }], lens_hide: [{
            type: Output
        }], lens_show: [{
            type: Output
        }], load: [{
            type: Output
        }], maps_zoom: [{
            type: Output
        }], menu_item_click: [{
            type: Output
        }], modify: [{
            type: Output
        }], modulesready: [{
            type: Output
        }], mousewheel: [{
            type: Output
        }], node_add: [{
            type: Output
        }], node_click: [{
            type: Output
        }], node_deselect: [{
            type: Output
        }], node_doubleclick: [{
            type: Output
        }], node_mousedown: [{
            type: Output
        }], node_mouseout: [{
            type: Output
        }], node_mouseover: [{
            type: Output
        }], node_mouseup: [{
            type: Output
        }], node_remove: [{
            type: Output
        }], node_select: [{
            type: Output
        }], node_set: [{
            type: Output
        }], objectsinit: [{
            type: Output
        }], objectsready: [{
            type: Output
        }], overscroll: [{
            type: Output
        }], plot_add: [{
            type: Output
        }], plot_click: [{
            type: Output
        }], plot_deselect: [{
            type: Output
        }], plot_doubleclick: [{
            type: Output
        }], plot_hide: [{
            type: Output
        }], plot_modify: [{
            type: Output
        }], plot_mouseout: [{
            type: Output
        }], plot_mouseover: [{
            type: Output
        }], plot_remove: [{
            type: Output
        }], plot_select: [{
            type: Output
        }], plot_show: [{
            type: Output
        }], postzoom: [{
            type: Output
        }], print: [{
            type: Output
        }], reload: [{
            type: Output
        }], render: [{
            type: Output
        }], resize: [{
            type: Output
        }], setdata: [{
            type: Output
        }], shape_click: [{
            type: Output
        }], shape_mousedown: [{
            type: Output
        }], shape_mouseout: [{
            type: Output
        }], shape_mouseover: [{
            type: Output
        }], shape_mouseup: [{
            type: Output
        }], source_hide: [{
            type: Output
        }], source_show: [{
            type: Output
        }], swipe: [{
            type: Output
        }], touchemove: [{
            type: Output
        }], touchend: [{
            type: Output
        }], touchstart: [{
            type: Output
        }], zingchart_plugins_selection_tool_mouseup: [{
            type: Output
        }], zingchart_plugins_selection_tool_selection: [{
            type: Output
        }], zoom: [{
            type: Output
        }], output: [{
            type: Input
        }], config: [{
            type: Input
        }], id: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], series: [{
            type: Input
        }], theme: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    ZingchartAngularComponent.prototype.config;
    /** @type {?} */
    ZingchartAngularComponent.prototype.id;
    /** @type {?} */
    ZingchartAngularComponent.prototype.width;
    /** @type {?} */
    ZingchartAngularComponent.prototype.output;
    /** @type {?} */
    ZingchartAngularComponent.prototype.height;
    /** @type {?} */
    ZingchartAngularComponent.prototype.series;
    /** @type {?} */
    ZingchartAngularComponent.prototype.theme;
    /** @type {?} */
    ZingchartAngularComponent.prototype.about_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.about_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.animation_end;
    /** @type {?} */
    ZingchartAngularComponent.prototype.animation_start;
    /** @type {?} */
    ZingchartAngularComponent.prototype.animation_step;
    /** @type {?} */
    ZingchartAngularComponent.prototype.beforedestroy;
    /** @type {?} */
    ZingchartAngularComponent.prototype.bugreport_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.bugreport_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.complete;
    /** @type {?} */
    ZingchartAngularComponent.prototype.data_export;
    /** @type {?} */
    ZingchartAngularComponent.prototype.dataexport;
    /** @type {?} */
    ZingchartAngularComponent.prototype.dataload;
    /** @type {?} */
    ZingchartAngularComponent.prototype.dataparse;
    /** @type {?} */
    ZingchartAngularComponent.prototype.dataready;
    /** @type {?} */
    ZingchartAngularComponent.prototype.destroy;
    /** @type {?} */
    ZingchartAngularComponent.prototype.dimension_change;
    /** @type {?} */
    ZingchartAngularComponent.prototype.error;
    /** @type {?} */
    ZingchartAngularComponent.prototype.feed_clear;
    /** @type {?} */
    ZingchartAngularComponent.prototype.feed_interval_modify;
    /** @type {?} */
    ZingchartAngularComponent.prototype.feed_start;
    /** @type {?} */
    ZingchartAngularComponent.prototype.feed_stop;
    /** @type {?} */
    ZingchartAngularComponent.prototype.gcomplete;
    /** @type {?} */
    ZingchartAngularComponent.prototype.gload;
    /** @type {?} */
    ZingchartAngularComponent.prototype.gparse;
    /** @type {?} */
    ZingchartAngularComponent.prototype.guide_mousemove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.guide_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.heatmap_mousemove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.history_back;
    /** @type {?} */
    ZingchartAngularComponent.prototype.history_forward;
    /** @type {?} */
    ZingchartAngularComponent.prototype.image_save;
    /** @type {?} */
    ZingchartAngularComponent.prototype.label_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.label_mousedown;
    /** @type {?} */
    ZingchartAngularComponent.prototype.label_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.label_mouseover;
    /** @type {?} */
    ZingchartAngularComponent.prototype.label_mouseup;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_item_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_item_mousemove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_item_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_item_mouseover;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_marker_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_maximize;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_minimize;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_minimize_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_pagination_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.legend_drag_mousedown;
    /** @type {?} */
    ZingchartAngularComponent.prototype.lens_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.lens_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.load;
    /** @type {?} */
    ZingchartAngularComponent.prototype.maps_zoom;
    /** @type {?} */
    ZingchartAngularComponent.prototype.menu_item_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.modify;
    /** @type {?} */
    ZingchartAngularComponent.prototype.modulesready;
    /** @type {?} */
    ZingchartAngularComponent.prototype.mousewheel;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_add;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_deselect;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_doubleclick;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_mousedown;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_mouseover;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_mouseup;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_remove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_select;
    /** @type {?} */
    ZingchartAngularComponent.prototype.node_set;
    /** @type {?} */
    ZingchartAngularComponent.prototype.objectsinit;
    /** @type {?} */
    ZingchartAngularComponent.prototype.objectsready;
    /** @type {?} */
    ZingchartAngularComponent.prototype.overscroll;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_add;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_deselect;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_doubleclick;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_modify;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_mouseover;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_remove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_select;
    /** @type {?} */
    ZingchartAngularComponent.prototype.plot_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.postzoom;
    /** @type {?} */
    ZingchartAngularComponent.prototype.print;
    /** @type {?} */
    ZingchartAngularComponent.prototype.reload;
    /** @type {?} */
    ZingchartAngularComponent.prototype.render;
    /** @type {?} */
    ZingchartAngularComponent.prototype.resize;
    /** @type {?} */
    ZingchartAngularComponent.prototype.setdata;
    /** @type {?} */
    ZingchartAngularComponent.prototype.shape_click;
    /** @type {?} */
    ZingchartAngularComponent.prototype.shape_mousedown;
    /** @type {?} */
    ZingchartAngularComponent.prototype.shape_mouseout;
    /** @type {?} */
    ZingchartAngularComponent.prototype.shape_mouseover;
    /** @type {?} */
    ZingchartAngularComponent.prototype.shape_mouseup;
    /** @type {?} */
    ZingchartAngularComponent.prototype.source_hide;
    /** @type {?} */
    ZingchartAngularComponent.prototype.source_show;
    /** @type {?} */
    ZingchartAngularComponent.prototype.swipe;
    /** @type {?} */
    ZingchartAngularComponent.prototype.touchemove;
    /** @type {?} */
    ZingchartAngularComponent.prototype.touchend;
    /** @type {?} */
    ZingchartAngularComponent.prototype.touchstart;
    /** @type {?} */
    ZingchartAngularComponent.prototype.zingchart_plugins_selection_tool_mouseup;
    /** @type {?} */
    ZingchartAngularComponent.prototype.zingchart_plugins_selection_tool_selection;
    /** @type {?} */
    ZingchartAngularComponent.prototype.zoom;
    /** @type {?} */
    ZingchartAngularComponent.prototype.chartId;
    /** @type {?} */
    ZingchartAngularComponent.prototype.chartWidth;
    /** @type {?} */
    ZingchartAngularComponent.prototype.chartHeight;
    /** @type {?} */
    ZingchartAngularComponent.prototype.renderObject;
    /**
     * @type {?}
     * @private
     */
    ZingchartAngularComponent.prototype.service;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ZingchartAngularModule {
}
ZingchartAngularModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ZingchartAngularModule });
ZingchartAngularModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ZingchartAngularModule_Factory(t) { return new (t || ZingchartAngularModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ZingchartAngularModule, { declarations: [ZingchartAngularComponent], exports: [ZingchartAngularComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZingchartAngularModule, [{
        type: NgModule,
        args: [{
                declarations: [ZingchartAngularComponent],
                imports: [],
                exports: [ZingchartAngularComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: projects.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: zingchart-angular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ZingchartAngularComponent, ZingchartAngularModule, ZingchartAngularService };

//# sourceMappingURL=zingchart-angular.js.map