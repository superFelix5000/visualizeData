{"version":3,"file":"ngx-csv-parser.js","sources":["ngx-csv-parser/lib/_model/ngx-csv-parser-error.interface.ts","ngx-csv-parser/lib/ngx-csv-parser.service.ts","ngx-csv-parser/lib/ngx-csv-parser.component.ts","ngx-csv-parser/lib/ngx-csv-parser.module.ts","ngx-csv-parser/public-api.ts","ngx-csv-parser/ngx-csv-parser.ts"],"names":[],"mappings":"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","sourcesContent":["export class NgxCSVParserError {\r\n    type: string;     // A generalization of the error\r\n    code: number;     // Standardized error code\r\n    message: string;  // Human-readable details\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxCsvParser {\r\n\r\n    private defaultCSVParserConfig = {\r\n        header: true,\r\n        delimiter: ','\r\n    };\r\n\r\n    parse(csvFile: File, config: CSVParserConfig): Observable<Array<any> | NgxCSVParserError> {\r\n\r\n        config = {\r\n            ...this.defaultCSVParserConfig,\r\n            ...config\r\n        };\r\n\r\n        const ngxCSVParserObserver = new Observable((observer: Observer<Array<any> | NgxCSVParserError>) => {\r\n            try {\r\n                let csvRecords = null;\r\n\r\n                if (this.isCSVFile(csvFile)) {\r\n\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(csvFile);\r\n\r\n                    reader.onload = () => {\r\n                        const csvData = reader.result;\r\n                        const csvRecordsArray = this.csvStringToArray((csvData as string).trim(), config.delimiter);\r\n\r\n                        const headersRow = this.getHeaderArray(csvRecordsArray);\r\n\r\n                        csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\r\n\r\n                        observer.next(csvRecords);\r\n                        observer.complete();\r\n                    };\r\n\r\n                    reader.onerror = () => {\r\n                        this.badCSVDataFormatErrorHandler(observer);\r\n                    };\r\n\r\n                } else {\r\n                    this.notCSVFileErrorHandler(observer);\r\n                }\r\n\r\n            } catch (error) {\r\n                this.unknownCSVParserErrorHandler(observer);\r\n            }\r\n        });\r\n\r\n        return ngxCSVParserObserver;\r\n    }\r\n\r\n    csvStringToArray(csvDataString: string, delimiter: string) {\r\n        const regexPattern = new RegExp((`(\\\\${delimiter}|\\\\r?\\\\n|\\\\r|^)(?:\\\"((?:\\\\\\\\.|\\\"\\\"|[^\\\\\\\\\\\"])*)\\\"|([^\\\\${delimiter}\\\"\\\\r\\\\n]*))`), \"gi\")\r\n        let matchedPatternArray = regexPattern.exec(csvDataString);\r\n        const resultCSV = [[]];\r\n        while (matchedPatternArray) {\r\n            if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {\r\n                resultCSV.push([]);\r\n            }\r\n            const cleanValue = matchedPatternArray[2] ?\r\n                matchedPatternArray[2].replace(new RegExp(\"[\\\\\\\\\\\"](.)\", \"g\"), '$1') : matchedPatternArray[3];\r\n            resultCSV[resultCSV.length - 1].push(cleanValue);\r\n            matchedPatternArray = regexPattern.exec(csvDataString);\r\n        }\r\n        return resultCSV;\r\n    }\r\n\r\n    getDataRecordsArrayFromCSVFile(csvRecordsArray: any, headerLength: any, config: any) {\r\n        const dataArr = [];\r\n        const headersArray = csvRecordsArray[0];\r\n\r\n        const startingRowToParseData = config.header ? 1 : 0;\r\n\r\n        for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\r\n            const data = csvRecordsArray[i];\r\n\r\n            if (data.length === headerLength && config.header) {\r\n\r\n                const csvRecord = {};\r\n\r\n                for (let j = 0; j < data.length; j++) {\r\n                    if ((data[j] === undefined) || (data[j] === null)) {\r\n                        csvRecord[headersArray[j]] = \"\";\r\n                    } else {\r\n                        csvRecord[headersArray[j]] = data[j].trim();\r\n                    }\r\n                }\r\n                dataArr.push(csvRecord);\r\n            } else {\r\n                dataArr.push(data);\r\n            }\r\n        }\r\n        return dataArr;\r\n    }\r\n\r\n    isCSVFile(file: any) {\r\n        return file.name.toLowerCase().endsWith('.csv');\r\n    }\r\n\r\n    getHeaderArray(csvRecordsArr: any) {\r\n        const headers = csvRecordsArr[0];\r\n        const headerArray = [];\r\n        for (const header of headers) {\r\n            headerArray.push(header);\r\n        }\r\n        return headerArray;\r\n    }\r\n\r\n    notCSVFileErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    unknownCSVParserErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    badCSVDataFormatErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    errorBuilder(type: string, message: any, code: any): NgxCSVParserError {\r\n        const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n        ngcCSVParserError.type = type;\r\n        ngcCSVParserError.message = message;\r\n        ngcCSVParserError.code = code;\r\n        return ngcCSVParserError;\r\n    }\r\n}\r\n\r\nclass CSVParserConfig {\r\n    header?: boolean;\r\n    delimiter?: string;\r\n\r\n    constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-csv-parser',\n  template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxCsvParserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCsvParserComponent } from './ngx-csv-parser.component';\nimport { NgxCsvParser } from './ngx-csv-parser.service';\n\n@NgModule({\n  declarations: [NgxCsvParserComponent],\n  imports: [\n  ],\n  providers: [NgxCsvParser],\n  exports: [NgxCsvParserComponent]\n})\nexport class NgxCsvParserModule { }\n","/*\n * Public API Surface of ngx-csv-parser\n */\n\nexport * from './lib/ngx-csv-parser.service';\nexport * from './lib/_model/ngx-csv-parser-error.interface';\nexport * from './lib/ngx-csv-parser.component';\nexport * from './lib/ngx-csv-parser.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}